class l{constructor({debug:t=!1}={}){this.progress=0,this.container=null,this.textElement=null,this.multiProgress=new Map,this.debug=t}_createLoadingDiv(){this.container=document.createElement("div"),this.textElement=document.createElement("div"),Object.assign(this.container.style,{position:"fixed",top:"0",left:"0",width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",background:"linear-gradient(135deg, #333333, #111111)",zIndex:"1000",opacity:"0.9",transition:"opacity 0.3s ease"}),Object.assign(this.textElement.style,{color:"#ffffff99",fontSize:"3rem"}),this.container.appendChild(this.textElement),document.body.appendChild(this.container)}updateProgress(t){this.progress=Math.min(Math.max(t,0),1),this.progress>0&&!this.container&&this._createLoadingDiv(),this.container&&(this.textElement.textContent=`Loading ${Math.floor(this.progress*100)}%`),this.progress===1&&this._removeLoadingDiv()}setGlobalProgress(t="",s=0){this.multiProgress.set(t,s);let i=!0;for(const e of this.multiProgress.values())if(e!==1){i=!1;break}if(i){if(this.multiProgress.clear(),this.updateProgress(1),this.debug){const e=`100% items:${this.multiProgress.size} id:${t.slice(0,30)}=>${s.toFixed(2)} `;console.log(e)}return}const o=[...this.multiProgress.values()].reduce((e,n)=>e+n,0)/this.multiProgress.size;if(this.updateProgress(o),this.debug){const e=`${o.toFixed(2)} size:${this.multiProgress.size} id:${t.slice(0,30)}=>${s.toFixed(2)} `;console.log(e)}}_removeLoadingDiv(){this.container&&(document.body.removeChild(this.container),this.container=null,this.textElement=null)}}export{l as L};
